#!/bin/bash
#Auteur  - Luis Modesto - 2025


# --- Paramètres ---
DEFAULT_PORTS="--top-ports 100" # Ports à scanner dans la phase initiale (100 plus courants)
STEALTH_TIMING="-T2"            # Temporisation "Polite" (-T2) : Lent pour réduire la détection

# --- Couleurs pour la sortie ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # Pas de couleur

# --- Vérifications Initiales ---
echo -e "${BLUE}--- Script Furtif de Détection d'OS avec Nmap (Sortie XML) ---${NC}"

# Vérifier si Nmap est installé
if ! command -v nmap &> /dev/null; then
    echo -e "${RED}Erreur : Nmap n'est pas installé. Veuillez installer Nmap.${NC}"
    exit 1
fi

# Vérifier si le script est exécuté en tant que root (nécessaire pour -sS, -O)
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Erreur : Ce script doit être exécuté en tant que root (utilisez sudo).${NC}"
  exit 1
fi

# --- Obtenir l'IP de l'Utilisateur ---
read -p "Veuillez entrer l'adresse IP de la cible à scanner : " TARGET_IP

# Validation basique de l'IP (pas parfaite, mais utile)
if ! [[ $TARGET_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  echo -e "${RED}Erreur : Adresse IP invalide.${NC}"
  exit 1
fi

# Définir le nom du fichier XML de sortie
xml_filename="${TARGET_IP}.xml"

echo -e "${YELLOW}Avertissement : Ce script utilise des techniques furtives, ce qui peut ralentir le scan.${NC}"
echo -e "${YELLOW}L'efficacité n'est jamais garantie à 100% contre les pare-feux/IDS avancés.${NC}"
echo -e "${YELLOW}N'utilisez ce script que sur des systèmes pour lesquels vous avez une autorisation explicite.${NC}"
echo -e "${BLUE}Le résultat final sera enregistré dans ${YELLOW}${xml_filename}${NC}${BLUE}.${NC}"
echo "-----------------------------------------------------"

# --- Phase 1 : Trouver les Ports Ouverts (Furtif) ---
echo -e "${BLUE}[Phase 1] Recherche de ports TCP ouverts (Scan SYN, $STEALTH_TIMING)...${NC}"
nmap_output_phase1=$(sudo nmap -sS -Pn -n -f $DEFAULT_PORTS $STEALTH_TIMING "$TARGET_IP")

# Extraire les ports TCP ouverts
open_ports=$(echo "$nmap_output_phase1" | grep ^[0-9]*/tcp | grep open | cut -d'/' -f1 | tr '\n' ',' | sed 's/,$//')

if [ -z "$open_ports" ]; then
  echo -e "${YELLOW}[Phase 1] Aucun port TCP ouvert trouvé parmi les ${DEFAULT_PORTS}. Impossible de continuer de manière fiable. Aucun fichier XML ne sera généré.${NC}"
  exit 0
else
  echo -e "${GREEN}[Phase 1] Ports TCP ouverts trouvés : $open_ports${NC}"
  echo "-----------------------------------------------------"
fi

# --- Phase 2 : Détection de Version (Encore Furtif) ---
# Note : On n'ajoute pas -oX ici pour ne pas écraser si la Phase 3 est exécutée
echo -e "${BLUE}[Phase 2] Tentative d'identification des services et versions sur les ports ouverts (peut révéler l'OS)...${NC}"
nmap_output_phase2=$(sudo nmap -sS -Pn -n -f -sV --version-intensity 5 -p "$open_ports" $STEALTH_TIMING "$TARGET_IP")

echo -e "${BLUE}--- Résultats de la Détection de Version (Phase 2) ---${NC}"
echo "$nmap_output_phase2" | grep -E "^[0-9]+/tcp\s+open"
echo "$nmap_output_phase2" | grep "Service Info: OS:"
echo "-----------------------------------------------------"

# Vérifier si nous avons déjà un bon indice sur l'OS à partir des versions
os_hint=$(echo "$nmap_output_phase2" | grep -Ei 'ubuntu|windows|linux|debian|centos|freebsd' || echo "$nmap_output_phase2" | grep "Service Info: OS:")

if [ -n "$os_hint" ]; then
    echo -e "${GREEN}[Phase 2] Des indices sur l'OS ont été trouvés via les bannières de service !${NC}"
fi

# Variable pour savoir si le fichier XML a été généré
xml_generated=false

# --- Phase 3 : Détection Directe de l'OS (Moins Furtive) ---
echo -e "${YELLOW}[Phase 3] Préparation à la tentative de détection directe de l'OS (-O).${NC}"
echo -e "${RED}Attention : Cette phase est MOINS furtive et a plus de chances d'être détectée !${NC}"
read -p "Souhaitez-vous procéder à la détection directe de l'OS (-O) ? (o/N) : " proceed_os_detect

if [[ "$proceed_os_detect" =~ ^[Oo]$ ]]; then
    echo -e "${BLUE}[Phase 3] Exécution de la détection directe de l'OS (-O, $STEALTH_TIMING) et enregistrement XML...${NC}"
    # Exécute la détection d'OS ET enregistre la sortie en XML
    # Note : -O implique un scan de ports, mais on le limite aux ports pertinents déjà trouvés
    # si possible, bien que Nmap puisse en scanner d'autres pour -O.
    # L'ajout de -p $open_ports n'est pas strictement nécessaire pour -O mais peut aider à focaliser.
    sudo nmap -O -Pn -n -f --osscan-limit $STEALTH_TIMING -oX "$xml_filename" "$TARGET_IP"

    # Vérifier si le fichier a été créé (simple vérification d'existence)
    if [ -f "$xml_filename" ]; then
        xml_generated=true
        echo -e "${BLUE}--- Résultats de la Détection Directe de l'OS (-O) ---${NC}"
        # On pourrait parser le XML pour afficher des infos, mais c'est complexe en bash.
        # On informe juste que c'est fait et enregistré.
        echo -e "${GREEN}La détection d'OS a été tentée.${NC}"
    else
         echo -e "${RED}Erreur : Le fichier XML n'a pas pu être généré lors de la Phase 3.${NC}"
    fi
else
    echo -e "${YELLOW}[Phase 3] Détection directe de l'OS (-O) ignorée.${NC}"
    echo -e "${BLUE}Enregistrement des résultats de la Phase 2 (Détection de version) dans le fichier XML...${NC}"
    # Exécute à nouveau le scan de version, mais cette fois en enregistrant en XML
    sudo nmap -sS -Pn -n -f -sV --version-intensity 5 -p "$open_ports" $STEALTH_TIMING -oX "$xml_filename" "$TARGET_IP"

    # Vérifier si le fichier a été créé
    if [ -f "$xml_filename" ]; then
        xml_generated=true
    else
         echo -e "${RED}Erreur : Le fichier XML n'a pas pu être généré lors de l'enregistrement de la Phase 2.${NC}"
    fi
fi

echo "-----------------------------------------------------"

# --- Notification Finale ---
if [ "$xml_generated" = true ]; then
    echo -e "${GREEN}Scan terminé. Les résultats ont été enregistrés dans le fichier : ${YELLOW}${xml_filename}${NC}"
else
    echo -e "${YELLOW}Scan terminé, mais aucun fichier XML n'a été généré (soit aucune porte ouverte trouvée, soit une erreur est survenue).${NC}"
fi

exit 0
